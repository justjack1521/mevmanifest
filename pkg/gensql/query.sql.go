// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package mevmanifest

import (
	"context"
)

const createApplicationFileTable = `-- name: CreateApplicationFileTable :exec
CREATE TABLE IF NOT EXISTS ApplicationFile (
    Path        text    not null,
    Size        integer not null,
    TimeStamp   integer not null,
    Application text    not null
)
`

func (q *Queries) CreateApplicationFileTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createApplicationFileTable)
	return err
}

const createApplicationVersion = `-- name: CreateApplicationVersion :exec
INSERT INTO ApplicationVersion (Name, Major, Minor, Patch)
VALUES (?, ?, ?, ?)
`

type CreateApplicationVersionParams struct {
	Name  string
	Major int64
	Minor int64
	Patch int64
}

func (q *Queries) CreateApplicationVersion(ctx context.Context, arg CreateApplicationVersionParams) error {
	_, err := q.db.ExecContext(ctx, createApplicationVersion,
		arg.Name,
		arg.Major,
		arg.Minor,
		arg.Patch,
	)
	return err
}

const createApplicationVersionTable = `-- name: CreateApplicationVersionTable :exec
CREATE TABLE IF NOT EXISTS ApplicationVersion (
    Name  text constraint ApplicationVersion_pk primary key,
    Major integer default 0 not null,
    Minor integer default 0 not null,
    Patch integer default 0 not null
)
`

func (q *Queries) CreateApplicationVersionTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createApplicationVersionTable)
	return err
}

const getApplicationFiles = `-- name: GetApplicationFiles :many
SELECT path, size, timestamp, application FROM ApplicationFile
WHERE Application = ?
`

func (q *Queries) GetApplicationFiles(ctx context.Context, application string) ([]ApplicationFile, error) {
	rows, err := q.db.QueryContext(ctx, getApplicationFiles, application)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationFile
	for rows.Next() {
		var i ApplicationFile
		if err := rows.Scan(
			&i.Path,
			&i.Size,
			&i.Timestamp,
			&i.Application,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApplicationVersion = `-- name: GetApplicationVersion :one
SELECT name, major, minor, patch FROM ApplicationVersion
WHERE Name = ? LIMIT 1
`

func (q *Queries) GetApplicationVersion(ctx context.Context, name string) (ApplicationVersion, error) {
	row := q.db.QueryRowContext(ctx, getApplicationVersion, name)
	var i ApplicationVersion
	err := row.Scan(
		&i.Name,
		&i.Major,
		&i.Minor,
		&i.Patch,
	)
	return i, err
}
